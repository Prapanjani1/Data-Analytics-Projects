create database e_commerce_db;
use e_commerce_db;
-- Create customers table
CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);

-- Insert sample data into customers table
INSERT INTO customers (name, email) VALUES
('John Doe', 'john@example.com'),
('Jane Smith', 'jane@example.com'),
('Alice Johnson', 'alice@example.com'),
('Bob Brown', 'bob@example.com'),
('Charlie White', 'charlie@example.com'),
('Dave Black', 'dave@example.com'),
('Eve Green', 'eve@example.com'),
('Frank Blue', 'frank@example.com'),
('Grace Red', 'grace@example.com'),
('Hank Yellow', 'hank@example.com'),
('Ivy Orange', 'ivy@example.com'),
('Jack Purple', 'jack@example.com'),
('Kelly Pink', 'kelly@example.com'),
('Leo Gray', 'leo@example.com'),
('Mia Lime', 'mia@example.com'),
('Nina Teal', 'nina@example.com'),
('Oscar Cyan', 'oscar@example.com'),
('Pauline Magenta', 'pauline@example.com'),
('Quinn Violet', 'quinn@example.com'),
('Rita Indigo', 'rita@example.com'),
('Sam Amber', 'sam@example.com'),
('Tina Brown', 'tina@example.com'),
('Uma Coral', 'uma@example.com');

-- Create orders table
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Insert sample data into orders table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2023-06-01', 150.00),
(2, '2023-06-02', 200.00),
(1, '2023-06-03', 75.00),
(3, '2023-06-04', 120.00),
(4, '2023-06-05', 80.00),
(5, '2023-06-06', 220.00),
(6, '2023-06-07', 160.00),
(7, '2023-06-08', 130.00),
(8, '2023-06-09', 190.00),
(9, '2023-06-10', 110.00),
(10, '2023-06-11', 170.00),
(11, '2023-06-12', 140.00),
(12, '2023-06-13', 210.00),
(13, '2023-06-14', 180.00),
(14, '2023-06-15', 90.00),
(15, '2023-06-16', 230.00),
(16, '2023-06-17', 70.00),
(17, '2023-06-18', 200.00),
(18, '2023-06-19', 85.00),
(19, '2023-06-20', 95.00),
(20, '2023-06-21', 105.00),
(21, '2023-06-22', 115.00),
(22, '2023-06-23', 125.00),
(23, '2023-06-24', 135.00);

-- Create order_items table
CREATE TABLE order_items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_name VARCHAR(100),
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- Insert sample data into order_items table
INSERT INTO order_items (order_id, product_name, quantity, price) VALUES
(1, 'Laptop', 1, 100.00),
(1, 'Mouse', 2, 25.00),
(2, 'Smartphone', 1, 200.00),
(3, 'Keyboard', 1, 50.00),
(3, 'Headphones', 1, 25.00),
(4, 'Tablet', 1, 80.00),
(5, 'Monitor', 2, 110.00),
(6, 'Laptop', 1, 160.00),
(7, 'Smartwatch', 2, 65.00),
(8, 'Camera', 1, 190.00),
(9, 'Printer', 1, 110.00),
(10, 'Router', 2, 85.00),
(11, 'USB Drive', 3, 25.00),
(12, 'External Hard Drive', 1, 210.00),
(13, 'Webcam', 1, 60.00),
(14, 'Speakers', 2, 45.00),
(15, 'Projector', 1, 230.00),
(16, 'Microphone', 1, 70.00),
(17, 'Charger', 2, 100.00),
(18, 'Headset', 1, 85.00),
(19, 'Smartphone', 1, 95.00),
(20, 'Tablet', 1, 105.00),
(21, 'Keyboard', 1, 115.00),
(22, 'Laptop Stand', 1, 125.00),
(23, 'Mouse Pad', 2, 65.00);


/* Questions related to this database:
1. How many customers have placed orders in June 2023?
2. What is the total number of orders placed by each customer?
3. What is the average order amount for each customer?
4. What is the total quantity of each product sold?
5. Which order has the highest total amount?
6. Who are the top 3 customers by total spending?
7. Which customers have not placed any orders?
8. Which order contains the maximum number of items?
9. Which products have never been sold?
10. What is the total revenue generated in June 2023?
11. What is the average quantity of items per order?
12. What are the total number of items in each order?
13. Which customers placed an order on '2023-06-10'?
14. What is the total revenue generated by each product?
15. How many unique products have been ordered?
16. Which orders include the product 'Laptop'?
17. What is the average price of items in each order?
18. Who is the customer who placed the earliest order?
19. What is the total number of orders for each day in June 2023?
20. Which product has generated the most revenue? */

-- Solutions
select * from customers;
select * from orders;
select * from order_items;
-- 1. How many customers have placed orders in June 2023?
SELECT COUNT( distinct orders.customer_id) AS customers_in_june
FROM orders
WHERE orders.order_date BETWEEN '2023-06-01' AND '2023-06-30';

-- 2. What is the total number of orders placed by each customer? 
select c.customer_id,c.name,count(o.order_id) as No_of_Orders
from customers as c
join orders as o on c.customer_id=o.customer_id 
group by c.customer_id ;

-- 3. What is the average order amount for each customer?
select c.customer_id,c.name,avg(o.total_amount) as AVG_ORDER_AMOUNT
from customers as c
join orders as o on c.customer_id=o.customer_id 
group by c.customer_id ;

-- 4. What is the total quantity of each product sold? 
select i.product_name, sum(i.quantity) as total_quantity
from order_items as i
group by i.product_name;

-- 5. Which order has the highest total amount?
select o.order_id,o.total_amount as Highest_Total_Amount
from orders as o
order by o.total_amount desc
Limit 1;

-- 6. Who are the top 3 customers by total spending?
select c.customer_id,c.name,o.order_id,o.total_amount as Highest_Total_Amount
from customers as c
join orders as o on c.customer_id=o.customer_id
order by o.total_amount desc
Limit 3;

-- 7. Which customers have not placed any orders?
select c.customer_id, c.name
from customers as c
left join orders as o on c.customer_id=o.customer_id
where o.order_id is null;

-- 8. Which order contains the maximum number of items?
select i.order_id,i.product_name, i.quantity as Max_No_of_Items
from order_items as i
order by i.quantity desc
Limit 1;

-- 9. Which products have never been sold?
select i.product_name,i.order_id
from orders as o
join order_items as i on o.order_id = i.order_id
where o.order_id is null;

-- 10. What is the total revenue generated in June 2023?
select sum(total_amount) as Total_Revenue_generated
from orders
where order_date between '2023-06-01' and '2023-06-30';

-- 11. What is the average quantity of items per order?
select * from customers;
select * from orders;
select * from order_items;
Select order_id, avg(quantity) 
from order_items
group by order_id;

-- 12. What are the total number of items in each order?
select order_id, sum(quantity) as Total_no_of_items_per_order
from order_items
group by order_id;

-- 13. Which customers placed an order on '2023-06-10'?
select c.customer_id,c.name,c.email,o.order_date
from customers as c
join orders o on c.customer_id=o.customer_id
where order_date = "2023-06-10";

-- 14. What is the total revenue generated by each product?
select product_name,sum(quantity) as ordered_quantity ,sum(price) as total_revenue_generated
from order_items
group by product_name;

-- 15. How many unique products have been ordered?
select count(distinct product_name) as unique_products
from order_items
where quantity = '1';

-- 16. Which orders include the product 'Laptop'?
select order_id,product_name,quantity
from order_items
where product_name = "Laptop";

-- 17. What is the average price of items in each order?
select order_id,avg(price) as average_price
from order_items
group by order_id;

-- 18.  Who is the customer who placed the earliest order?
select * from customers;
select * from orders; 
select c.customer_id,c.name,c.email,min(o.order_date) as earliest_order_date
from customers as c
join orders as o on c.customer_id=o.customer_id
group by c.customer_id
order by earliest_order_date
limit 1;

-- 19. What is the total number of orders for each day in June 2023?
select order_date,count(order_id) as Total_no_of_orders
from orders
where order_date between "2023-06-01" and '2023-06-30'
group by order_date;

-- 20. Which product has generated the most revenue?
select * from order_items;
select product_name,sum(quantity*price) as highest_revenue
from order_items
group by product_name
order by highest_revenue desc
limit 1;
